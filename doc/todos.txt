Nice to haves:

UI
---


-Rolle: Admin einführen (Flag)



Design
-------
Farben und Layout überlegen
Known-Button: Buttons statt Links - per CSS
Anzeige einer aussagekräftigen Fehlermeldung wenn bereits existierender Benutzername erneut angelegt wird oder die Password-Validierung fehl schlägt

Administrationspanel (Admin-Rolle mit Möglichkeit user, cardsets, cards beliebig zu editieren) - Ausgangsbasis: http://localhost:3000/cards nur für Admins zugängig machen


Refactoring / Rewrite-Ideen von Sven:
-----------

- Zuerst Models entwerfen:
Das meint erstmal mit Stift und Papier überlegen, wie die Form und die gegenseitigen Abhängigkeiten aussehen sollen, dabei so einfach wie möglich bleiben. Also die reine Logik der Relationen zwischen Karten, Karten-Sets und Usern, z.B.: sind diese zwei has-and-belongs-to-many-Relationen wirklich notwendig? Oder könnte es eher eine has_many :through Relation sein?
- Tests schreiben:
Die Funktionalität wird geprüft und das Schreiben der Tests sollte auch mehr Klarheit verschaffen, welches Model welche Aufgaben hat. Dann zuerst nur die Models implementieren
- REST beachten:
Wenn die ganze Logik im Model statt im Controller ist, dann ist letzterer wesentlich schlanker (und sollte auch besser zu verstehen sein).
- Guides lesen:
association - welche Relation ist wofür angemessen? z.B.: http://guides.rubyonrails.org/association_basics.html
resources - routes.rb besser gestalten, z.B.: http://guides.rubyonrails.org/routing.html

Refactoring - Technik
---------
Karte als known/unknown per URL-Parameter und POST übergeben (so dass nur eine Controller-Methode nötig)

Neue Karte in Set anlegen/Karte bearbeiten: Die "schwarze Magie" und das Rumgehacke beim Anzeigen und Speichern der CardSet-Assoziation beenden	

